#!/usr/bin/env python
from __future__ import print_function
import glob2, argparse, os, re, sys, json
import enchant
import enchant.checker
from enchant.checker.CmdLineChecker import CmdLineChecker
from enchant.tokenize import EmailFilter, URLFilter

VERBOSE = False

def log(msg):
    if VERBOSE:
        print(msg)

class Config:
    DEFAULT_INCLUDE_PATTERN = './**/*.md'
    DEFAULT_GITBOOKS_CONFIG = os.path.abspath(os.path.join(os.getcwd(), 'book.json'))
    DEFAULT_CUSTOM_WORD_DICT = os.path.abspath(os.path.join(os.getcwd(), '.spelling'))
    ARG_KEYS = ['exclude', 'include', 'custom-words-dict']

    def __init__(self):
        self.files = set()
        self.custom_word_dict = Config.DEFAULT_CUSTOM_WORD_DICT
        self.report = False
        self.config = Config.DEFAULT_GITBOOKS_CONFIG
        self.include = [Config.DEFAULT_INCLUDE_PATTERN]
        self.exclude = []

    def load(self):
        arg_parser = self.setup_arg_parser()
        args = arg_parser.parse_args()

        global VERBOSE
        VERBOSE = args.v

        if args.quiet:
            sys.stdout = open(os.devnull, 'w')

        self.config = args.config
        if os.path.isfile(self.config):
            self.load_gitbook_json_config()
        self.load_arg_parse_config(args)


        for path in self.include:
            self.files.update([os.path.abspath(f) for f in glob2.glob(path)])

        for path in self.exclude:
            self.files.difference_update([os.path.abspath(f) for f in glob2.glob(path)])

        log('Found the following files to spellcheck: {}'.format(self.files))

        # enchant adds a newline to the custom word dictionary when you add to it
        # sometimes which causes a nasty looking warning to pop up.
        # this block removes empty lines from the dicitonary
        f = open(self.custom_word_dict,"r+")
        lines = [line for line in f.readlines() if line.strip()]
        f.seek(0)
        for line in lines:
            f.write(line)
        f.truncate()
        f.close()

        self.report = args.report

    def setup_arg_parser(self):
        parser = argparse.ArgumentParser(prog='markdown-spellcheck', description='')
        parser.add_argument('-v', action='store_true', default=False, help='Enable verbose output. (default: False)')
        parser.add_argument('-q', '--quiet', action='store_true', default=False, help='disable all output, useful for scripting purposes')
        parser.add_argument('--custom-words-dict', help='file contianing custom words dictionary. (default: {})'.format(Config.DEFAULT_CUSTOM_WORD_DICT))
        parser.add_argument('-r', '--report', action='store_true', default=False, help='run report of spelling errors')
        parser.add_argument('--exclude', nargs='+', help='List of file patterns to exclude in search. Uses glob under the hood which allows use of Unix shell-style wildcards. See https://docs.python.org/3.4/library/glob.html#module-glob. (book.json path: pluginsConfig.markdown-spellcheck.exclude). (default: None)')
        parser.add_argument('--include', nargs='+', help='List of file patterns to include in search. Uses glob under the hood which allows use of Unix shell-style wildcards. See https://docs.python.org/3.4/library/glob.html#module-glob. (book.json path: pluginsConfig.markdown-spellcheck.include). (default: {})'.format(Config.DEFAULT_INCLUDE_PATTERN))
        parser.add_argument('-c', '--config', default=Config.DEFAULT_GITBOOKS_CONFIG, help='gitbook book.json file to load configurations from. arguments passed via commandline will override those in json config file. (default: {})'.format(Config.DEFAULT_GITBOOKS_CONFIG))

        return parser

    def load_gitbook_json_config(self):
        if not os.path.isfile(self.config):
            log('config file not found at {}, using default/cli configuration'.format(self.config))
        else:
            with open(self.config) as f:
                data = json.load(f)
                for key in Config.ARG_KEYS:
                    try:
                        setattr(self, key.replace('-', '_'), data['pluginsConfig']['markdown-spellcheck'][key])
                    except KeyError as e:
                        log('key \'pluginsConfig.markdown-spellcheck.{}\' not found in json config: {}'.format(key, e))

    def load_arg_parse_config(self, args):
        for key in Config.ARG_KEYS:
            try:
                cli_override = getattr(args, key.replace('-', '_'))
                if cli_override is not None:
                    setattr(self, key.replace('-', '_'), cli_override)
            except AttributeError as e:
                pass

class MarkdownChunker(enchant.tokenize.Chunker):
    def next(self):
        text = self._text
        offset = self.offset


        while True:
            if offset >= len(text):
                break
            if text[offset] == "(":
                maybeLink = offset
                if offset-1 > 0 and text[offset-1] == ']':
                    while text[offset] != ')':
                        offset += 1
                        if offset == len(text):
                            offset = maybeLink + 1
                            break
                    else:
                        offset += 1
                else:
                    offset = maybeLink+1
            sPos = offset
            #  Find the start of the next tag.
            while offset < len(text) and text[offset] != "(":
                offset += 1
            ePos = offset
            self._offset = offset
            # Return if chunk isn't empty
            if(sPos < offset):
                return (text[sPos:offset],sPos)

        raise StopIteration()

if __name__ == '__main__':
    config = Config()
    config.load()

    d = enchant.DictWithPWL("en_US", pwl=config.custom_word_dict)
    chkr = enchant.checker.SpellChecker(d, chunkers=[MarkdownChunker], filters=[EmailFilter,URLFilter])

    for f in config.files:
        if config.report:
            errors_found = 0
            with open(f) as file_to_check:
                line_number = 1
                for line in file_to_check:
                    chkr.set_text(line)
                    for error in chkr:
                        errors_found += 1
                        print('{} line {}: {} (Suggestions: {})'.format(f, str(line_number), error.word, d.suggest(error.word)))
                    line_number += 1
            sys.exit(errors_found)
        else:
            cmdln = CmdLineChecker()
            cmdln.set_checker(chkr)
            cmdln.run_on_file(f)
